[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog",
    "section": "",
    "text": "Nov 3, 2022\n\n\nKavyn Abel\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNov 2, 2022\n\n\nKavyn Abel\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 22, 2022\n\n\nKavyn Abel\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/first_post/index.html",
    "href": "posts/first_post/index.html",
    "title": "Interactive Stock App",
    "section": "",
    "text": "I have started learning streamlit, an open-source Python library to build an interactive stock app. I want to make an easy experience for the user to see some stock analysis.\nHere are some images of what I have going so far. I allow the user to choose their stock along with the start and end dates that they want to observe.\n\n\nThis has been so cool to use the user inputs to display a dataframe of the stock closing price over their chosen time period and to show it in a chart!\nThe next item I am working on is a streamlit metric that will show the user the percentage increase or decrease of the stock over the given time frame.\nFor anyone interested here is a link to Streamlit documentation: https://docs.streamlit.io/library/get-started"
  },
  {
    "objectID": "posts/second_post/index.html",
    "href": "posts/second_post/index.html",
    "title": "Lists in Streamlit",
    "section": "",
    "text": "In my last post I introduced my interactive stock app. I wanted to allow the user to input however many stocks they want to look it, and have the program show data, charts, and other metrics for each stock. I felt that an easy way to do this would be with a list. Put all the input stocks into a list and then run all my code through a for loop.\nI attempted making a variable for a list, then appending the user input to the list each time they typed something in. It didn’t work, and with some time and research I learned that the page was essentially refreshing when I entered input and hit enter. So always the only thing in the list was the last thing I had put into the list. It wasn’t retaining the list variable through the refresh.\nDigging deeper I learned that a possible solution was with streamlit’s session state (https://docs.streamlit.io/library/api-reference/session-state). In streamlit documentation we read, “Session State is a way to share variables between reruns, for each user session. In addition to the ability to store and persist state, Streamlit also exposes the ability to manipulate state using Callbacks. Session state also persists across apps inside a multipage app.”\nCool! Right? In learning and testing this I was able to have it work with a numerical variable, counting up with a button. The variable being stored and persisting through each state. But in trying to apply the logic to a list it still didn’t work. :(\nPuzzled, I dug even deeper. And with more research I found a conversation that happened in discuss.streamlit.io where someone was facing a similar problem. This linked me to a custom made solution by gagan3012 (https://discuss.streamlit.io/t/new-component-streamlit-tags-a-new-way-to-do-add-tags-and-enter-keywords/10810). This individual made a custom tag function called streamlit-tags. I installed it with pip install streamlit-tags in my environment on Anaconda where I have been launching my code editor from and running streamlit on.\nThen it was as easy as this in my code editor:\n\nRunning this in streamlit here is what we see\n\nYou can easily input an item and see it added to the list object being displayed below\n\nAdding a second item verifies that it is working, appending them both to the list\n\nFinally! We are now adding user input items to a list in streamlit. Like normal we can continue to use this list of items in our code. Even run through each item in a for loop for your codes desires.\nIt was a longer journey than I anticipated, but I am glad to have learned how to add items to a list that I can use in my apps. I hope that this helps you, and allows you to save time not going through the research and testing that I have gone through to get to this point."
  },
  {
    "objectID": "posts/third_post/index.html",
    "href": "posts/third_post/index.html",
    "title": "A Thought on For Loops and Streamlit Widgets",
    "section": "",
    "text": "Now what does that mean?\nAfter a little research I came to know that input widgets such as text input, buttons, download buttons, date input etc… (https://docs.streamlit.io/library/api-reference/widgets) when they are created have a unique key tied to them in the backend.\nI had my text input widgets assigned to a variable, and when looping through my list and running this command it was trying to duplicate the widget, having the same key, which is a no go in streamlit. I learned that you can add an additional argument to these widgets called key which sets the key of that widget.\nTo make this text widget, that was repeating in the loop, have a different key each time here is what I did.\nI created my list and started a count variable outside of the for loop. \nInside the loop I added 1 to the count every time it went through the loop. \nI assigned this changing variable as the key of my widget. \nThis way I do not see the DuplicateWidgetID error, as the widget now has a changing key."
  }
]