---
title: "Lists in Streamlit"
author: "Kavyn Abel"
date: "2022-11-02"
---

I want to write about my experience in trying to incorporate lists into a streamlit app, and hope that this will help you.

In my last post I introduced my interactive stock app. I wanted to allow the user to input however many stocks they want to look it, and have the program show data, charts, and other metrics for each stock. I felt that an easy way to do this would be with a list. Put all the input stocks into a list and then run all my code through a for loop.

I attempted making a variable for a list, then appending the user input to the list each time they typed something in. It didn't work, and with some time and research I learned that the page was essentially refreshing when I entered input and hit enter. So always the only thing in the list was the last thing I had put into the list. It wasn't retaining the list variable through the refresh.

Digging deeper I learned that a possible solution was with streamlit's session state (https://docs.streamlit.io/library/api-reference/session-state). In streamlit documentation we read, "Session State is a way to share variables between reruns, for each user session. In addition to the ability to store and persist state, Streamlit also exposes the ability to manipulate state using Callbacks. Session state also persists across apps inside a multipage app."

Cool! Right? In learning and testing this I was able to have it work with a numerical variable, counting up with a button. The variable being stored and persisting through each state. But in trying to apply the logic to a list it still didn't work. :(

Puzzled, I dug even deeper. And with more research I found a conversation that happened in discuss.streamlit.io where someone was facing a similar problem. This linked me to a custom made solution by gagan3012 (https://discuss.streamlit.io/t/new-component-streamlit-tags-a-new-way-to-do-add-tags-and-enter-keywords/10810). This individual made a custom tag function called streamlit-tags. I installed it with pip install streamlit-tags in my environment on Anaconda where I have been launching my code editor from and running streamlit on.

Then it was as easy as this in my code editor:

![](list_code.jpg)

Running this in streamlit here is what we see

![](start_screen.jpg)

You can easily input an item and see it added to the list object being displayed below

![](first_list_item.jpg)

Adding a second item verifies that it is working, appending them both to the list

![](second_list_item.jpg)

Finally! We are now adding user input items to a list in streamlit. Like normal we can continue to use this list of items in our code. Even run through each item in a for loop for your codes desires.

It was a longer journey than I anticipated, but I am glad to have learned how to add items to a list that I can use in my apps. I hope that this helps you, and allows you to save time not going through the research and testing that I have gone through to get to this point.